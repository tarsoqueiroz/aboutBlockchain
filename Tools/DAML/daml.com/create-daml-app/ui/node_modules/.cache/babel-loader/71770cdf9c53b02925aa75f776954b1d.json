{"ast":null,"code":"var _jsxFileName = \"/Data/Learn/DAML/daml.com/create-daml-app/ui/src/components/LoginScreen.tsx\";\n// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback } from 'react';\nimport { Button, Form, Grid, Header, Image, Segment } from 'semantic-ui-react';\nimport { computeCredentials } from '../Credentials';\nimport Ledger from '@daml/ledger';\nimport { User } from '@daml.js/create-daml-app';\nimport { DeploymentMode, deploymentMode, ledgerId, httpBaseUrl } from '../config';\nimport { useEffect } from 'react';\n\n/**\n * React component for the login screen of the `App`.\n */\nconst LoginScreen = ({\n  onLogin\n}) => {\n  const [username, setUsername] = React.useState('');\n  const login = useCallback(async credentials => {\n    try {\n      const ledger = new Ledger({\n        token: credentials.token,\n        httpBaseUrl\n      });\n      let userContract = await ledger.fetchByKey(User.User, credentials.party);\n\n      if (userContract === null) {\n        const user = {\n          username: credentials.party,\n          following: []\n        };\n        userContract = await ledger.create(User.User, user);\n      }\n\n      onLogin(credentials);\n    } catch (error) {\n      alert(`Unknown error:\\n${JSON.stringify(error)}`);\n    }\n  }, [onLogin]);\n\n  const handleLogin = async event => {\n    event.preventDefault();\n    const credentials = computeCredentials(username);\n    await login(credentials);\n  };\n\n  const handleDablLogin = () => {\n    window.location.assign(`https://login.projectdabl.com/auth/login?ledgerId=${ledgerId}`);\n  };\n\n  useEffect(() => {\n    const url = new URL(window.location.toString());\n    const token = url.searchParams.get('token');\n\n    if (token === null) {\n      return;\n    }\n\n    const party = url.searchParams.get('party');\n\n    if (party === null) {\n      throw Error(\"When 'token' is passed via URL, 'party' must be passed too.\");\n    }\n\n    url.search = '';\n    window.history.replaceState(window.history.state, '', url.toString());\n    login({\n      token,\n      party,\n      ledgerId\n    });\n  }, [login]);\n  return /*#__PURE__*/React.createElement(Grid, {\n    textAlign: \"center\",\n    style: {\n      height: '100vh'\n    },\n    verticalAlign: \"middle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    style: {\n      maxWidth: 450\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    as: \"h1\",\n    textAlign: \"center\",\n    size: \"huge\",\n    style: {\n      color: '#223668'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, \"Create\", /*#__PURE__*/React.createElement(Image, {\n    as: \"a\",\n    href: \"https://www.daml.com/\",\n    target: \"_blank\",\n    src: \"/daml.svg\",\n    alt: \"DAML Logo\",\n    spaced: true,\n    size: \"small\",\n    verticalAlign: \"middle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }), \"App\")), /*#__PURE__*/React.createElement(Form, {\n    size: \"large\",\n    className: \"test-select-login-screen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Segment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, deploymentMode !== DeploymentMode.PROD_DABL ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form.Input, {\n    fluid: true,\n    icon: \"user\",\n    iconPosition: \"left\",\n    placeholder: \"Username\",\n    value: username,\n    className: \"test-select-username-field\",\n    onChange: e => setUsername(e.currentTarget.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    primary: true,\n    fluid: true,\n    className: \"test-select-login-button\",\n    onClick: handleLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, \"Log in\")) : /*#__PURE__*/React.createElement(Button, {\n    primary: true,\n    fluid: true,\n    onClick: handleDablLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  }, \"Log in with DABL\")))));\n};\n\nexport default LoginScreen;","map":{"version":3,"sources":["/Data/Learn/DAML/daml.com/create-daml-app/ui/src/components/LoginScreen.tsx"],"names":["React","useCallback","Button","Form","Grid","Header","Image","Segment","computeCredentials","Ledger","User","DeploymentMode","deploymentMode","ledgerId","httpBaseUrl","useEffect","LoginScreen","onLogin","username","setUsername","useState","login","credentials","ledger","token","userContract","fetchByKey","party","user","following","create","error","alert","JSON","stringify","handleLogin","event","preventDefault","handleDablLogin","window","location","assign","url","URL","toString","searchParams","get","Error","search","history","replaceState","state","height","maxWidth","color","PROD_DABL","e","currentTarget","value"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useCallback } from 'react'\nimport { Button, Form, Grid, Header, Image, Segment } from 'semantic-ui-react'\nimport Credentials, { computeCredentials } from '../Credentials';\nimport Ledger from '@daml/ledger';\nimport { User } from '@daml.js/create-daml-app';\nimport { DeploymentMode, deploymentMode, ledgerId, httpBaseUrl} from '../config';\nimport { useEffect } from 'react';\n\ntype Props = {\n  onLogin: (credentials: Credentials) => void;\n}\n\n/**\n * React component for the login screen of the `App`.\n */\nconst LoginScreen: React.FC<Props> = ({onLogin}) => {\n  const [username, setUsername] = React.useState('');\n\n  const login = useCallback(async (credentials: Credentials) => {\n    try {\n      const ledger = new Ledger({token: credentials.token, httpBaseUrl});\n      let userContract = await ledger.fetchByKey(User.User, credentials.party);\n      if (userContract === null) {\n        const user = {username: credentials.party, following: []};\n        userContract = await ledger.create(User.User, user);\n      }\n      onLogin(credentials);\n    } catch(error) {\n      alert(`Unknown error:\\n${JSON.stringify(error)}`);\n    }\n  }, [onLogin]);\n\n  const handleLogin = async (event: React.FormEvent) => {\n    event.preventDefault();\n    const credentials = computeCredentials(username);\n    await login(credentials);\n  }\n\n  const handleDablLogin = () => {\n    window.location.assign(`https://login.projectdabl.com/auth/login?ledgerId=${ledgerId}`);\n  }\n\n  useEffect(() => {\n    const url = new URL(window.location.toString());\n    const token = url.searchParams.get('token');\n    if (token === null) {\n      return;\n    }\n    const party = url.searchParams.get('party');\n    if (party === null) {\n      throw Error(\"When 'token' is passed via URL, 'party' must be passed too.\");\n    }\n    url.search = '';\n    window.history.replaceState(window.history.state, '', url.toString());\n    login({token, party, ledgerId});\n  }, [login]);\n\n  return (\n    <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as='h1' textAlign='center' size='huge' style={{color: '#223668'}}>\n          <Header.Content>\n            Create\n            <Image\n              as='a'\n              href='https://www.daml.com/'\n              target='_blank'\n              src='/daml.svg'\n              alt='DAML Logo'\n              spaced\n              size='small'\n              verticalAlign='middle'\n            />\n            App\n          </Header.Content>\n        </Header>\n        <Form size='large' className='test-select-login-screen'>\n          <Segment>\n            {deploymentMode !== DeploymentMode.PROD_DABL\n            ? <>\n                {/* FORM_BEGIN */}\n                <Form.Input\n                  fluid\n                  icon='user'\n                  iconPosition='left'\n                  placeholder='Username'\n                  value={username}\n                  className='test-select-username-field'\n                  onChange={e => setUsername(e.currentTarget.value)}\n                />\n                <Button\n                  primary\n                  fluid\n                  className='test-select-login-button'\n                  onClick={handleLogin}>\n                  Log in\n                </Button>\n                {/* FORM_END */}\n              </>\n            : <Button primary fluid onClick={handleDablLogin}>\n                Log in with DABL\n              </Button>\n            }\n          </Segment>\n        </Form>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default LoginScreen;\n"]},"metadata":{},"sourceType":"module"}