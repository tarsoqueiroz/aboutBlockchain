{"ast":null,"code":"\"use strict\"; // Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar createLedgerContext_1 = require(\"./createLedgerContext\");\n/**\n * @internal\n */\n\n\nvar ledgerContext = createLedgerContext_1.createLedgerContext();\n/**\n * Within a `DamlLedger` one can use the hooks provided here.\n *\n * @param props React props and children for this element.\n */\n\nfunction DamlLedger(props) {\n  return ledgerContext.DamlLedger(props);\n}\n\nexports.DamlLedger = DamlLedger;\n/**\n * React hook to get the party currently connected to the ledger.\n */\n\nfunction useParty() {\n  return ledgerContext.useParty();\n}\n\nexports.useParty = useParty;\n/**\n * React Hook that returns the Ledger instance to interact with the connected DAML ledger.\n */\n\nfunction useLedger() {\n  return ledgerContext.useLedger();\n}\n\nexports.useLedger = useLedger;\n\nfunction useQuery(template, queryFactory, queryDeps) {\n  return ledgerContext.useQuery(template, queryFactory, queryDeps);\n}\n\nexports.useQuery = useQuery;\n/**\n * React Hook for a lookup by key against the `/v1/fetch` endpoint of the JSON API.\n *\n * @typeparam T The contract template type of the query.\n * @typeparam K The contract key type of the query.\n * @typeparam I The template id type.\n *\n * @param template The template of the contracts to fetch.\n * @param keyFactory A function returning the contract key of the contracts to fetch.\n * @param keyDeps Dependencies of this hook (for which the fetch is reexecuted on change).\n *\n * @return The fetched contract.\n */\n\nfunction useFetchByKey(template, keyFactory, keyDeps) {\n  return ledgerContext.useFetchByKey(template, keyFactory, keyDeps);\n}\n\nexports.useFetchByKey = useFetchByKey;\n\nfunction useStreamQuery(template, queryFactory, queryDeps) {\n  return ledgerContext.useStreamQuery(template, queryFactory, queryDeps);\n}\n\nexports.useStreamQuery = useStreamQuery;\n/**\n * React Hook to query the ledger. Same as useStreamQuery, but query by contract key instead.\n *\n * @typeparam T The contract template type of the query.\n * @typeparam K The contract key type of the query.\n * @typeparam I The template id type.\n *\n * @param template The template of the contracts to match.\n * @param queryFactory A function returning a contract key.\n * @param queryDeps The dependencies of the query (for which a change triggers an update of the result)\n *\n * @return The matching (unique) contract.\n */\n\nfunction useStreamFetchByKey(template, keyFactory, keyDeps) {\n  return ledgerContext.useStreamFetchByKey(template, keyFactory, keyDeps);\n}\n\nexports.useStreamFetchByKey = useStreamFetchByKey;\n/**\n * React Hook to reload all active queries.\n */\n\nfunction useReload() {\n  return ledgerContext.useReload();\n}\n\nexports.useReload = useReload;","map":{"version":3,"sources":["/Data/Learn/DAML/daml.com/create-daml-app/ui/node_modules/@daml/react/defaultLedgerContext.js"],"names":["Object","defineProperty","exports","value","createLedgerContext_1","require","ledgerContext","createLedgerContext","DamlLedger","props","useParty","useLedger","useQuery","template","queryFactory","queryDeps","useFetchByKey","keyFactory","keyDeps","useStreamQuery","useStreamFetchByKey","useReload"],"mappings":"AAAA,a,CACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,qBAAqB,GAAGC,OAAO,CAAC,uBAAD,CAAnC;AACA;;;;;AAGA,IAAIC,aAAa,GAAGF,qBAAqB,CAACG,mBAAtB,EAApB;AACA;;;;;;AAKA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACvB,SAAOH,aAAa,CAACE,UAAd,CAAyBC,KAAzB,CAAP;AACH;;AACDP,OAAO,CAACM,UAAR,GAAqBA,UAArB;AACA;;;;AAGA,SAASE,QAAT,GAAoB;AAAE,SAAOJ,aAAa,CAACI,QAAd,EAAP;AAAkC;;AACxDR,OAAO,CAACQ,QAAR,GAAmBA,QAAnB;AACA;;;;AAGA,SAASC,SAAT,GAAqB;AAAE,SAAOL,aAAa,CAACK,SAAd,EAAP;AAAmC;;AAC1DT,OAAO,CAACS,SAAR,GAAoBA,SAApB;;AACA,SAASC,QAAT,CAAkBC,QAAlB,EAA4BC,YAA5B,EAA0CC,SAA1C,EAAqD;AACjD,SAAOT,aAAa,CAACM,QAAd,CAAuBC,QAAvB,EAAiCC,YAAjC,EAA+CC,SAA/C,CAAP;AACH;;AACDb,OAAO,CAACU,QAAR,GAAmBA,QAAnB;AACA;;;;;;;;;;;;;;AAaA,SAASI,aAAT,CAAuBH,QAAvB,EAAiCI,UAAjC,EAA6CC,OAA7C,EAAsD;AAClD,SAAOZ,aAAa,CAACU,aAAd,CAA4BH,QAA5B,EAAsCI,UAAtC,EAAkDC,OAAlD,CAAP;AACH;;AACDhB,OAAO,CAACc,aAAR,GAAwBA,aAAxB;;AACA,SAASG,cAAT,CAAwBN,QAAxB,EAAkCC,YAAlC,EAAgDC,SAAhD,EAA2D;AACvD,SAAOT,aAAa,CAACa,cAAd,CAA6BN,QAA7B,EAAuCC,YAAvC,EAAqDC,SAArD,CAAP;AACH;;AACDb,OAAO,CAACiB,cAAR,GAAyBA,cAAzB;AACA;;;;;;;;;;;;;;AAaA,SAASC,mBAAT,CAA6BP,QAA7B,EAAuCI,UAAvC,EAAmDC,OAAnD,EAA4D;AACxD,SAAOZ,aAAa,CAACc,mBAAd,CAAkCP,QAAlC,EAA4CI,UAA5C,EAAwDC,OAAxD,CAAP;AACH;;AACDhB,OAAO,CAACkB,mBAAR,GAA8BA,mBAA9B;AACA;;;;AAGA,SAASC,SAAT,GAAqB;AACjB,SAAOf,aAAa,CAACe,SAAd,EAAP;AACH;;AACDnB,OAAO,CAACmB,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\n// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar createLedgerContext_1 = require(\"./createLedgerContext\");\n/**\n * @internal\n */\nvar ledgerContext = createLedgerContext_1.createLedgerContext();\n/**\n * Within a `DamlLedger` one can use the hooks provided here.\n *\n * @param props React props and children for this element.\n */\nfunction DamlLedger(props) {\n    return ledgerContext.DamlLedger(props);\n}\nexports.DamlLedger = DamlLedger;\n/**\n * React hook to get the party currently connected to the ledger.\n */\nfunction useParty() { return ledgerContext.useParty(); }\nexports.useParty = useParty;\n/**\n * React Hook that returns the Ledger instance to interact with the connected DAML ledger.\n */\nfunction useLedger() { return ledgerContext.useLedger(); }\nexports.useLedger = useLedger;\nfunction useQuery(template, queryFactory, queryDeps) {\n    return ledgerContext.useQuery(template, queryFactory, queryDeps);\n}\nexports.useQuery = useQuery;\n/**\n * React Hook for a lookup by key against the `/v1/fetch` endpoint of the JSON API.\n *\n * @typeparam T The contract template type of the query.\n * @typeparam K The contract key type of the query.\n * @typeparam I The template id type.\n *\n * @param template The template of the contracts to fetch.\n * @param keyFactory A function returning the contract key of the contracts to fetch.\n * @param keyDeps Dependencies of this hook (for which the fetch is reexecuted on change).\n *\n * @return The fetched contract.\n */\nfunction useFetchByKey(template, keyFactory, keyDeps) {\n    return ledgerContext.useFetchByKey(template, keyFactory, keyDeps);\n}\nexports.useFetchByKey = useFetchByKey;\nfunction useStreamQuery(template, queryFactory, queryDeps) {\n    return ledgerContext.useStreamQuery(template, queryFactory, queryDeps);\n}\nexports.useStreamQuery = useStreamQuery;\n/**\n * React Hook to query the ledger. Same as useStreamQuery, but query by contract key instead.\n *\n * @typeparam T The contract template type of the query.\n * @typeparam K The contract key type of the query.\n * @typeparam I The template id type.\n *\n * @param template The template of the contracts to match.\n * @param queryFactory A function returning a contract key.\n * @param queryDeps The dependencies of the query (for which a change triggers an update of the result)\n *\n * @return The matching (unique) contract.\n */\nfunction useStreamFetchByKey(template, keyFactory, keyDeps) {\n    return ledgerContext.useStreamFetchByKey(template, keyFactory, keyDeps);\n}\nexports.useStreamFetchByKey = useStreamFetchByKey;\n/**\n * React Hook to reload all active queries.\n */\nfunction useReload() {\n    return ledgerContext.useReload();\n}\nexports.useReload = useReload;\n//# sourceMappingURL=defaultLedgerContext.js.map"]},"metadata":{},"sourceType":"script"}