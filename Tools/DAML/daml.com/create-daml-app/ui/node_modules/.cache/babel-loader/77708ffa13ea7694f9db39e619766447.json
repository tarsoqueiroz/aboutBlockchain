{"ast":null,"code":"var _jsxFileName = \"/Data/Learn/DAML/daml.com/create-daml-app/ui/src/components/MainView.tsx\";\n// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport { Container, Grid, Header, Icon, Segment, Divider } from 'semantic-ui-react';\nimport { User } from '@daml.js/create-daml-app';\nimport { useParty, useLedger, useStreamFetchByKey, useStreamQuery } from '@daml/react';\nimport UserList from './UserList';\nimport PartyListEdit from './PartyListEdit'; // USERS_BEGIN\n\nconst MainView = () => {\n  var _myUserResult$contrac, _myUser$username, _myUser$following;\n\n  const username = useParty();\n  const myUserResult = useStreamFetchByKey(User.User, () => username, [username]);\n  const myUser = (_myUserResult$contrac = myUserResult.contract) === null || _myUserResult$contrac === void 0 ? void 0 : _myUserResult$contrac.payload;\n  const allUsers = useStreamQuery(User.User).contracts; // USERS_END\n  // Sorted list of users that are following the current user\n\n  const followers = useMemo(() => allUsers.map(user => user.payload).filter(user => user.username !== username).sort((x, y) => x.username.localeCompare(y.username)), [allUsers, username]); // FOLLOW_BEGIN\n\n  const ledger = useLedger();\n\n  const follow = async userToFollow => {\n    try {\n      await ledger.exerciseByKey(User.User.Follow, username, {\n        userToFollow\n      });\n      return true;\n    } catch (error) {\n      alert(\"Unknown error:\\n\" + JSON.stringify(error));\n      return false;\n    }\n  }; // FOLLOW_END\n\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    centered: true,\n    columns: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Row, {\n    stretched: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid.Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    as: \"h1\",\n    size: \"huge\",\n    color: \"blue\",\n    textAlign: \"center\",\n    style: {\n      padding: '1ex 0em 0ex 0em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, myUser ? `Welcome, ${myUser.username}!` : 'Loading...'), /*#__PURE__*/React.createElement(Segment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    as: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    name: \"user\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Header.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, (_myUser$username = myUser === null || myUser === void 0 ? void 0 : myUser.username) !== null && _myUser$username !== void 0 ? _myUser$username : 'Loading...', /*#__PURE__*/React.createElement(Header.Subheader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 19\n    }\n  }, \"Users I'm following\"))), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(PartyListEdit, {\n    parties: (_myUser$following = myUser === null || myUser === void 0 ? void 0 : myUser.following) !== null && _myUser$following !== void 0 ? _myUser$following : [],\n    onAddParty: follow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Segment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    as: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    name: \"globe\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Header.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, \"The Network\", /*#__PURE__*/React.createElement(Header.Subheader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 19\n    }\n  }, \"My followers and users they are following\"))), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(UserList, {\n    users: followers,\n    onFollow: follow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  }))))));\n};\n\nexport default MainView;","map":{"version":3,"sources":["/Data/Learn/DAML/daml.com/create-daml-app/ui/src/components/MainView.tsx"],"names":["React","useMemo","Container","Grid","Header","Icon","Segment","Divider","User","useParty","useLedger","useStreamFetchByKey","useStreamQuery","UserList","PartyListEdit","MainView","username","myUserResult","myUser","contract","payload","allUsers","contracts","followers","map","user","filter","sort","x","y","localeCompare","ledger","follow","userToFollow","exerciseByKey","Follow","error","alert","JSON","stringify","padding","following"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useMemo } from 'react';\nimport { Container, Grid, Header, Icon, Segment, Divider } from 'semantic-ui-react';\nimport { Party } from '@daml/types';\nimport { User } from '@daml.js/create-daml-app';\nimport { useParty, useLedger, useStreamFetchByKey, useStreamQuery } from '@daml/react';\nimport UserList from './UserList';\nimport PartyListEdit from './PartyListEdit';\n\n// USERS_BEGIN\nconst MainView: React.FC = () => {\n  const username = useParty();\n  const myUserResult = useStreamFetchByKey(User.User, () => username, [username]);\n  const myUser = myUserResult.contract?.payload;\n  const allUsers = useStreamQuery(User.User).contracts;\n// USERS_END\n\n  // Sorted list of users that are following the current user\n  const followers = useMemo(() =>\n    allUsers\n    .map(user => user.payload)\n    .filter(user => user.username !== username)\n    .sort((x, y) => x.username.localeCompare(y.username)),\n    [allUsers, username]);\n\n  // FOLLOW_BEGIN\n  const ledger = useLedger();\n\n  const follow = async (userToFollow: Party): Promise<boolean> => {\n    try {\n      await ledger.exerciseByKey(User.User.Follow, username, {userToFollow});\n      return true;\n    } catch (error) {\n      alert(\"Unknown error:\\n\" + JSON.stringify(error));\n      return false;\n    }\n  }\n  // FOLLOW_END\n\n  return (\n    <Container>\n      <Grid centered columns={2}>\n        <Grid.Row stretched>\n          <Grid.Column>\n            <Header as='h1' size='huge' color='blue' textAlign='center' style={{padding: '1ex 0em 0ex 0em'}}>\n                {myUser ? `Welcome, ${myUser.username}!` : 'Loading...'}\n            </Header>\n\n            <Segment>\n              <Header as='h2'>\n                <Icon name='user' />\n                <Header.Content>\n                  {myUser?.username ?? 'Loading...'}\n                  <Header.Subheader>Users I'm following</Header.Subheader>\n                </Header.Content>\n              </Header>\n              <Divider />\n              <PartyListEdit\n                parties={myUser?.following ?? []}\n                onAddParty={follow}\n              />\n            </Segment>\n            <Segment>\n              <Header as='h2'>\n                <Icon name='globe' />\n                <Header.Content>\n                  The Network\n                  <Header.Subheader>My followers and users they are following</Header.Subheader>\n                </Header.Content>\n              </Header>\n              <Divider />\n              {/* USERLIST_BEGIN */}\n              <UserList\n                users={followers}\n                onFollow={follow}\n              />\n              {/* USERLIST_END */}\n            </Segment>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default MainView;\n"]},"metadata":{},"sourceType":"module"}