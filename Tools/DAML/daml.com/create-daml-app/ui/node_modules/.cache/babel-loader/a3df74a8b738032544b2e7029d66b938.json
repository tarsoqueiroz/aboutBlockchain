{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar jtv = require(\"@mojotech/json-type-validation\");\n/**\n * @internal\n */\n\n\nvar registeredTemplates = {};\n/**\n * @internal\n */\n\nexports.registerTemplate = function (template) {\n  var templateId = template.templateId;\n  var oldTemplate = registeredTemplates[templateId];\n\n  if (oldTemplate === undefined) {\n    registeredTemplates[templateId] = template;\n    console.debug(\"Registered template \" + templateId + \".\");\n  } else {\n    console.warn(\"Trying to re-register template \" + templateId + \".\");\n  }\n};\n/**\n * @internal\n */\n\n\nexports.lookupTemplate = function (templateId) {\n  var template = registeredTemplates[templateId];\n\n  if (template === undefined) {\n    throw Error(\"Trying to look up template \" + templateId + \".\");\n  }\n\n  return template;\n};\n/**\n * @internal Turn a thunk into a memoized version of itself. The memoized thunk\n * invokes the original thunk only on its first invocation and caches the result\n * for later uses. We use this to implement a version of `jtv.lazy` with\n * memoization.\n */\n\n\nfunction memo(thunk) {\n  var memoized = function () {\n    var cache = thunk();\n\n    memoized = function () {\n      return cache;\n    };\n\n    return cache;\n  }; // NOTE(MH): Since we change `memoized` when the resultung thunk is invoked\n  // for the first time, we need to return it \"by reference\". Thus, we return\n  // a closure which contains a reference to `memoized`.\n\n\n  return function () {\n    return memoized();\n  };\n}\n\nexports.memo = memo;\n/**\n * @internal Variation of `jtv.lazy` which memoizes the computed decoder on its\n * first invocation.\n */\n\nfunction lazyMemo(mkDecoder) {\n  return jtv.lazy(memo(mkDecoder));\n}\n\nexports.lazyMemo = lazyMemo;\n/**\n * Companion obect of the [[Unit]] type.\n */\n\nexports.Unit = {\n  decoder: jtv.object({})\n};\n/**\n * Companion object of the [[Bool]] type.\n */\n\nexports.Bool = {\n  decoder: jtv.boolean()\n};\n/**\n * Companion object of the [[Int]] type.\n */\n\nexports.Int = {\n  decoder: jtv.string()\n};\n/**\n * Companion function of the [[Numeric]] type.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexports.Numeric = function (_) {\n  return {\n    decoder: jtv.string()\n  };\n};\n/**\n * Companion object of the [[Decimal]] type.\n */\n\n\nexports.Decimal = exports.Numeric(10);\n/**\n * Companion object of the [[Text]] type.\n */\n\nexports.Text = {\n  decoder: jtv.string()\n};\n/**\n * Companion object of the [[Time]] type.\n */\n\nexports.Time = {\n  decoder: jtv.string()\n};\n/**\n * Companion object of the [[Party]] type.\n */\n\nexports.Party = {\n  decoder: jtv.string()\n};\n/**\n * Companion object of the [[List]] type.\n */\n\nexports.List = function (t) {\n  return {\n    decoder: jtv.array(t.decoder)\n  };\n};\n/**\n * Companion object of the [[Date]] type.\n */\n\n\nexports.Date = {\n  decoder: jtv.string()\n};\n/**\n * Used to `brand` [[ContractId]].\n */\n\nvar ContractIdBrand = Symbol();\n/**\n * Companion object of the [[ContractId]] type.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexports.ContractId = function (_t) {\n  return {\n    decoder: jtv.string()\n  };\n};\n/**\n * This class does the actual work behind the [[Optional]] companion function.  In addition to\n * implementing the [[Serializable]] interface it also stores the [[Serializable]] instance of the\n * payload of the [[Optional]] and uses it to provide a decoder for the [[OptionalInner]] type.\n *\n * @typeparam T The type of the optionally present value.\n */\n\n\nvar OptionalWorker =\n/** @class */\nfunction () {\n  function OptionalWorker(payload) {\n    if (payload instanceof OptionalWorker) {\n      var payloadInnerDecoder = payload.innerDecoder;\n      this.innerDecoder = jtv.oneOf(jtv.constant([]), jtv.tuple([payloadInnerDecoder]));\n    } else {\n      // NOTE(MH): `T` is not of the form `Optional<U>` here and hence `null`\n      // does not extend `T`. Thus, `OptionalInner<T> = T`.\n      this.innerDecoder = payload.decoder;\n    }\n\n    this.decoder = jtv.oneOf(jtv.constant(null), this.innerDecoder);\n  }\n\n  return OptionalWorker;\n}();\n/**\n * Companion function of the [[Optional]] type.\n */\n\n\nexports.Optional = function (t) {\n  return new OptionalWorker(t);\n};\n/**\n * Companion object of the [[TextMap]] type.\n */\n\n\nexports.TextMap = function (t) {\n  return {\n    decoder: jtv.dict(t.decoder)\n  };\n}; // TODO(MH): `Map` type.","map":{"version":3,"sources":["/Data/Learn/DAML/daml.com/create-daml-app/ui/node_modules/@daml/types/index.js"],"names":["Object","defineProperty","exports","value","jtv","require","registeredTemplates","registerTemplate","template","templateId","oldTemplate","undefined","console","debug","warn","lookupTemplate","Error","memo","thunk","memoized","cache","lazyMemo","mkDecoder","lazy","Unit","decoder","object","Bool","boolean","Int","string","Numeric","_","Decimal","Text","Time","Party","List","t","array","Date","ContractIdBrand","Symbol","ContractId","_t","OptionalWorker","payload","payloadInnerDecoder","innerDecoder","oneOf","constant","tuple","Optional","TextMap","dict"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar jtv = require(\"@mojotech/json-type-validation\");\n/**\n * @internal\n */\nvar registeredTemplates = {};\n/**\n * @internal\n */\nexports.registerTemplate = function (template) {\n    var templateId = template.templateId;\n    var oldTemplate = registeredTemplates[templateId];\n    if (oldTemplate === undefined) {\n        registeredTemplates[templateId] = template;\n        console.debug(\"Registered template \" + templateId + \".\");\n    }\n    else {\n        console.warn(\"Trying to re-register template \" + templateId + \".\");\n    }\n};\n/**\n * @internal\n */\nexports.lookupTemplate = function (templateId) {\n    var template = registeredTemplates[templateId];\n    if (template === undefined) {\n        throw Error(\"Trying to look up template \" + templateId + \".\");\n    }\n    return template;\n};\n/**\n * @internal Turn a thunk into a memoized version of itself. The memoized thunk\n * invokes the original thunk only on its first invocation and caches the result\n * for later uses. We use this to implement a version of `jtv.lazy` with\n * memoization.\n */\nfunction memo(thunk) {\n    var memoized = function () {\n        var cache = thunk();\n        memoized = function () { return cache; };\n        return cache;\n    };\n    // NOTE(MH): Since we change `memoized` when the resultung thunk is invoked\n    // for the first time, we need to return it \"by reference\". Thus, we return\n    // a closure which contains a reference to `memoized`.\n    return function () { return memoized(); };\n}\nexports.memo = memo;\n/**\n * @internal Variation of `jtv.lazy` which memoizes the computed decoder on its\n * first invocation.\n */\nfunction lazyMemo(mkDecoder) {\n    return jtv.lazy(memo(mkDecoder));\n}\nexports.lazyMemo = lazyMemo;\n/**\n * Companion obect of the [[Unit]] type.\n */\nexports.Unit = {\n    decoder: jtv.object({}),\n};\n/**\n * Companion object of the [[Bool]] type.\n */\nexports.Bool = {\n    decoder: jtv.boolean(),\n};\n/**\n * Companion object of the [[Int]] type.\n */\nexports.Int = {\n    decoder: jtv.string(),\n};\n/**\n * Companion function of the [[Numeric]] type.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexports.Numeric = function (_) {\n    return ({\n        decoder: jtv.string(),\n    });\n};\n/**\n * Companion object of the [[Decimal]] type.\n */\nexports.Decimal = exports.Numeric(10);\n/**\n * Companion object of the [[Text]] type.\n */\nexports.Text = {\n    decoder: jtv.string(),\n};\n/**\n * Companion object of the [[Time]] type.\n */\nexports.Time = {\n    decoder: jtv.string(),\n};\n/**\n * Companion object of the [[Party]] type.\n */\nexports.Party = {\n    decoder: jtv.string(),\n};\n/**\n * Companion object of the [[List]] type.\n */\nexports.List = function (t) { return ({\n    decoder: jtv.array(t.decoder),\n}); };\n/**\n * Companion object of the [[Date]] type.\n */\nexports.Date = {\n    decoder: jtv.string(),\n};\n/**\n * Used to `brand` [[ContractId]].\n */\nvar ContractIdBrand = Symbol();\n/**\n * Companion object of the [[ContractId]] type.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexports.ContractId = function (_t) { return ({\n    decoder: jtv.string(),\n}); };\n/**\n * This class does the actual work behind the [[Optional]] companion function.  In addition to\n * implementing the [[Serializable]] interface it also stores the [[Serializable]] instance of the\n * payload of the [[Optional]] and uses it to provide a decoder for the [[OptionalInner]] type.\n *\n * @typeparam T The type of the optionally present value.\n */\nvar OptionalWorker = /** @class */ (function () {\n    function OptionalWorker(payload) {\n        if (payload instanceof OptionalWorker) {\n            var payloadInnerDecoder = payload.innerDecoder;\n            this.innerDecoder = jtv.oneOf(jtv.constant([]), jtv.tuple([payloadInnerDecoder]));\n        }\n        else {\n            // NOTE(MH): `T` is not of the form `Optional<U>` here and hence `null`\n            // does not extend `T`. Thus, `OptionalInner<T> = T`.\n            this.innerDecoder = payload.decoder;\n        }\n        this.decoder = jtv.oneOf(jtv.constant(null), this.innerDecoder);\n    }\n    return OptionalWorker;\n}());\n/**\n * Companion function of the [[Optional]] type.\n */\nexports.Optional = function (t) {\n    return new OptionalWorker(t);\n};\n/**\n * Companion object of the [[TextMap]] type.\n */\nexports.TextMap = function (t) { return ({\n    decoder: jtv.dict(t.decoder),\n}); };\n// TODO(MH): `Map` type.\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}