"use strict";
// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
var createLedgerContext_1 = require("./createLedgerContext");
/**
 * @internal
 */
var ledgerContext = createLedgerContext_1.createLedgerContext();
/**
 * Within a `DamlLedger` one can use the hooks provided here.
 *
 * @param props React props and children for this element.
 */
function DamlLedger(props) {
    return ledgerContext.DamlLedger(props);
}
exports.DamlLedger = DamlLedger;
/**
 * React hook to get the party currently connected to the ledger.
 */
function useParty() { return ledgerContext.useParty(); }
exports.useParty = useParty;
/**
 * React Hook that returns the Ledger instance to interact with the connected DAML ledger.
 */
function useLedger() { return ledgerContext.useLedger(); }
exports.useLedger = useLedger;
function useQuery(template, queryFactory, queryDeps) {
    return ledgerContext.useQuery(template, queryFactory, queryDeps);
}
exports.useQuery = useQuery;
/**
 * React Hook for a lookup by key against the `/v1/fetch` endpoint of the JSON API.
 *
 * @typeparam T The contract template type of the query.
 * @typeparam K The contract key type of the query.
 * @typeparam I The template id type.
 *
 * @param template The template of the contracts to fetch.
 * @param keyFactory A function returning the contract key of the contracts to fetch.
 * @param keyDeps Dependencies of this hook (for which the fetch is reexecuted on change).
 *
 * @return The fetched contract.
 */
function useFetchByKey(template, keyFactory, keyDeps) {
    return ledgerContext.useFetchByKey(template, keyFactory, keyDeps);
}
exports.useFetchByKey = useFetchByKey;
function useStreamQuery(template, queryFactory, queryDeps) {
    return ledgerContext.useStreamQuery(template, queryFactory, queryDeps);
}
exports.useStreamQuery = useStreamQuery;
/**
 * React Hook to query the ledger. Same as useStreamQuery, but query by contract key instead.
 *
 * @typeparam T The contract template type of the query.
 * @typeparam K The contract key type of the query.
 * @typeparam I The template id type.
 *
 * @param template The template of the contracts to match.
 * @param queryFactory A function returning a contract key.
 * @param queryDeps The dependencies of the query (for which a change triggers an update of the result)
 *
 * @return The matching (unique) contract.
 */
function useStreamFetchByKey(template, keyFactory, keyDeps) {
    return ledgerContext.useStreamFetchByKey(template, keyFactory, keyDeps);
}
exports.useStreamFetchByKey = useStreamFetchByKey;
/**
 * React Hook to reload all active queries.
 */
function useReload() {
    return ledgerContext.useReload();
}
exports.useReload = useReload;
//# sourceMappingURL=defaultLedgerContext.js.map